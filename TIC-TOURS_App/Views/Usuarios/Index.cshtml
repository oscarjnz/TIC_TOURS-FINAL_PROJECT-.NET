@model List<capaModelo.DTO.UsuarioDTO>
@{
    ViewBag.Title = "Usuarios Internos";
}

<div class="bg-gray-50 min-h-screen py-8">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <!-- Encabezado -->
        <div class="mb-8 flex justify-between items-center">
            <div>
                <h1 class="text-2xl font-bold text-gray-900">Usuarios Internos</h1>
                <p class="mt-2 text-gray-600">Gestione los usuarios con acceso al sistema administrativo</p>
            </div>
            <div>
                <a href="@Url.Action("Crear", "Usuarios")" class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-teal-600 hover:bg-teal-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-teal-500 transition-colors duration-200">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
                    </svg>
                    Nuevo Usuario
                </a>
            </div>
        </div>

        <!-- Tabla de usuarios -->
        <div class="bg-white rounded-xl shadow-md overflow-hidden">
            <div class="overflow-x-auto">
                <table class="min-w-full divide-y divide-gray-200">
                    <thead class="bg-gray-50">
                    <tr>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Nombre
                        </th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Correo ElectrÃÂÃÂ³nico
                        </th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Rol
                        </th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Estado
                        </th>
                        <th scope="col" class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Acciones
                        </th>
                    </tr>
                    </thead>
                    <tbody class="bg-white divide-y divide-gray-200">
                    @foreach (var u in Model)
                    {
                        <tr class="hover:bg-gray-50 transition-colors">
                            <td class="px-6 py-4 whitespace-nowrap">
                                <div class="flex items-center">
                                    <div class="flex-shrink-0 h-10 w-10 bg-teal-100 rounded-full flex items-center justify-center">
                                        <span class="text-teal-700 font-medium">@(u.Nombre.Substring(0, 1) + u.Apellido.Substring(0, 1))</span>
                                    </div>
                                    <div class="ml-4">
                                        <div class="text-sm font-medium text-gray-900">@u.Nombre @u.Apellido</div>
                                    </div>
                                </div>
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap">
                                <div class="text-sm text-gray-700">@u.CorreoElectronico</div>
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap">
                                <div class="text-sm text-gray-700">@GetRolName(u.IdRol.Value)</div>
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap">
                                    <span class="@GetEstadoClass(u.EstadoCuenta)">
                                        @u.EstadoCuenta
                                    </span>
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                                <div class="flex justify-end space-x-2">
                                    <a href="@Url.Action("Editar", "Usuarios", new { id = u.IdUsuario })" class="text-teal-600 hover:text-teal-900 bg-teal-100 hover:bg-teal-200 rounded-md px-3 py-1.5 transition-colors">
                                            <span class="flex items-center">
                                                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                                                </svg>
                                                Editar
                                            </span>
                                    </a>
                                    <a href="@Url.Action("CambiarEstado", "Usuarios", new { id = u.IdUsuario })"
                                       class="@GetActionButtonClass(u.EstadoCuenta)">
                                            <span class="flex items-center">
                                                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M18.364 18.364A9 9 0 005.636 5.636m12.728 12.728A9 9 0 015.636 5.636m12.728 12.728L5.636 5.636" />
                                                </svg>
                                                @((u.EstadoCuenta == "activo") ? "Suspender" : "Activar")
                                            </span>
                                    </a>
                                </div>
                            </td>
                        </tr>
                    }
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Mensaje si no hay usuarios -->
        @if (Model.Count == 0)
        {
            <div class="mt-6 bg-yellow-50 rounded-lg p-4 border border-yellow-100">
                <div class="flex">
                    <div class="flex-shrink-0">
                        <svg class="h-5 w-5 text-yellow-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2h-1V9z" clip-rule="evenodd" />
                        </svg>
                    </div>
                    <div class="ml-3">
                        <h3 class="text-sm font-medium text-yellow-800">No hay usuarios registrados</h3>
                        <div class="mt-2 text-sm text-yellow-700">
                            <p>
                                No se encontraron usuarios internos en el sistema.
                                <a href="@Url.Action("Crear", "Usuarios")" class="font-medium underline">Crear un nuevo usuario</a>.
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@functions {
    string GetRolName(int idRol)
    {
        switch (idRol)
        {
            case 1:
                return "Administrador";
            case 2:
                return "Operador";
            case 3:
                return "Soporte";
            default:
                return "Usuario";
        }
    }

    string GetEstadoClass(string estado)
    {
        estado = estado.ToLower();
        switch (estado)
        {
            case "activo":
                return "px-2 py-1 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800";
            case "suspendido":
                return "px-2 py-1 inline-flex text-xs leading-5 font-semibold rounded-full bg-red-100 text-red-800";
            case "pendiente":
                return "px-2 py-1 inline-flex text-xs leading-5 font-semibold rounded-full bg-yellow-100 text-yellow-800";
            default:
                return "px-2 py-1 inline-flex text-xs leading-5 font-semibold rounded-full bg-gray-100 text-gray-800";
        }
    }

    string GetActionButtonClass(string estado)
    {
        if (estado.ToLower() == "activo")
        {
            return "text-amber-600 hover:text-amber-900 bg-amber-100 hover:bg-amber-200 rounded-md px-3 py-1.5 transition-colors";
        }
        else
        {
            return "text-green-600 hover:text-green-900 bg-green-100 hover:bg-green-200 rounded-md px-3 py-1.5 transition-colors";
        }
    }
}